#include <stdbool.h> // Pour bool, true, false

#define TAILLE_PLATEAU 9 // Taille du plateau

// Vérifie si une position est accessible sur le plateau
bool estDeplacementValide(int x, int y, int plateau[TAILLE_PLATEAU][TAILLE_PLATEAU]) {
    return x >= 0 && x < TAILLE_PLATEAU && y >= 0 && y < TAILLE_PLATEAU && plateau[x][y] == 0;
}

// Vérifie si un joueur a un chemin vers sa ligne de but
bool cheminDisponible(int ligneDepart, int colonneDepart, int ligneBut, int plateau[TAILLE_PLATEAU][TAILLE_PLATEAU]) {
    bool visite[TAILLE_PLATEAU][TAILLE_PLATEAU] = {false};
    int fileX[TAILLE_PLATEAU * TAILLE_PLATEAU];
    int fileY[TAILLE_PLATEAU * TAILLE_PLATEAU];
    int debut = 0, fin = 0;

    // Initialiser la file avec la position de départ
    fileX[fin] = ligneDepart;
    fileY[fin] = colonneDepart;
    fin++;
    visite[ligneDepart][colonneDepart] = true;

    // Parcours en largeur (BFS)
    while (debut < fin) {
        int x = fileX[debut];
        int y = fileY[debut];
        debut++;

        // Si la ligne de but est atteinte
        if (x == ligneBut) return true;

        // Explorer les cases voisines
        for (int i = 0; i < 4; i++) {
            int nx = x + (i == 0 ? -1 : (i == 1 ? 1 : 0)); // Haut/Bas
            int ny = y + (i == 2 ? -1 : (i == 3 ? 1 : 0)); // Gauche/Droite

            if (estDeplacementValide(nx, ny, plateau) && !visite[nx][ny]) {
                visite[nx][ny] = true;
                fileX[fin] = nx;
                fileY[fin] = ny;
                fin++;
            }
        }
    }

    return false; // Aucun chemin trouvé
}

// Vérifie si la partie est bloquée
bool partieBloquee(int ligneDepart, int colonneDepart, int ligneBut, int plateau[TAILLE_PLATEAU][TAILLE_PLATEAU]) {
    return !cheminDisponible(ligneDepart, colonneDepart, ligneBut, plateau);
}








#include <stdbool.h>
#include <stdio.h>

#define TAILLE_PLATEAU 9

// Plateau de jeu représenté par une matrice
char plateau[TAILLE_PLATEAU][TAILLE_PLATEAU];

// Vérifie si un déplacement est valide et dans les limites du plateau
bool estDeplacementValide(int x, int y) {
    return (x >= 0 && x < TAILLE_PLATEAU && y >= 0 && y < TAILLE_PLATEAU && plateau[x][y] == ' ');
}

// Fonction qui vérifie si un chemin est disponible pour un joueur donné
bool cheminDisponible(int ligneDepart, int colDepart, int ligneBut) {
    bool visite[TAILLE_PLATEAU][TAILLE_PLATEAU] = {false};
    int fileX[TAILLE_PLATEAU * TAILLE_PLATEAU];
    int fileY[TAILLE_PLATEAU * TAILLE_PLATEAU];
    int debut = 0, fin = 0;

    // Initialisation de la file avec la position de départ
    fileX[fin] = ligneDepart;
    fileY[fin] = colDepart;
    fin++;
    visite[ligneDepart][colDepart] = true;

    // Directions de déplacement (haut, bas, gauche, droite)
    int dX[] = {-1, 1, 0, 0};
    int dY[] = {0, 0, -1, 1};

    // Parcours BFS
    while (debut < fin) {
        int x = fileX[debut];
        int y = fileY[debut];
        debut++;

        // Vérifie si la ligne de but est atteinte
        if (x == ligneBut) return true;

        // Parcourt les directions possibles
        for (int i = 0; i < 4; i++) {
            int nx = x + dX[i];
            int ny = y + dY[i];

            if (estDeplacementValide(nx, ny) && !visite[nx][ny]) {
                visite[nx][ny] = true;
                fileX[fin] = nx;
                fileY[fin] = ny;
                fin++;
            }
        }
    }

    // Aucun chemin trouvé
    return false;
}

// Vérifie si la partie est bloquée
bool verifierBlocagePartie(int lignesDepart[], int colonnesDepart[], int lignesBut[], int nombreDeJoueurs) {
    for (int i = 0; i < nombreDeJoueurs; i++) {
        if (cheminDisponible(lignesDepart[i], colonnesDepart[i], lignesBut[i])) {
            return false; // Au moins un joueur peut encore atteindre sa ligne de but
        }
    }
    return true; // Tous les joueurs sont bloqués
}

